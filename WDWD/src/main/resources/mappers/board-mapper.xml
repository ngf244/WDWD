<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">
	<select id="getMyReplyCount" parameterType="string" resultType="_int">
		select count(*)
		from reply
		where RP_WRITER = #{userId} and RP_DEL = 'N'
	</select>
	
	<resultMap type="Reply" id="replyResultSet">
		<id property="rpNum" column="RP_NUM"/>
		<result property="rpContent" column="RP_CON"/>
		<result property="rpDate" column="RP_DATE"/>
		<result property="rpStatus" column="RP_DEL"/>
		<result property="refNum" column="RP_REFNUM"/>
		<result property="rpWriter" column="RP_WRITER"/>
		<result property="rpConNum" column="RP_CON_NUM"/>
		<result property="rpRp" column="RP_RP"/>
	</resultMap>
	
	<select id="selectMyReplyList" parameterType="string" resultMap="replyResultSet">
		select *
		from reply
     		 join member on(ME_ID = RP_WRITER)
		where RP_WRITER = #{userId} AND RP_DEL = 'N'
		order by RP_DATE DESC
	</select>
	
	<insert id="boardWriting" parameterType="Board">
		insert into board
		values(bo_seq.nextval, #{boGroup}, #{boTitle}, #{boContent}, default, 
			default, default, default, #{boWriter}, default, #{boCategory}, default)
	</insert>
	
	<insert id="insertContents" parameterType="Contents">
		insert into contents
		values(con_seq.nextval, #{conOri}, #{conCop}, #{conUrl}, null, default, 
		<choose>
			<when test="conRef == 0">
			bo_seq.currval)
			</when>
			<otherwise>
			#{conRef})
			</otherwise>
		</choose>
	</insert>
	
	
	<select id="freeDetail" parameterType="_int" resultMap="boardResultSet">
		select b.*, m.me_nick
		from board b
    		join member m on (bo_writer = me_id)
		where bo_num = #{boNum} and bo_del = 'N'
	</select>
	
	<update id="plusViewCount">
		update board
		set bo_view = bo_view + 1
		where bo_num = #{boNum}
	</update>
	
	<resultMap type="Board" id="boardResultSet">
		<id property="boNum" column="BO_NUM"/>
		<result property="boGroup" column="BO_GROUP"/>
		<result property="boTitle" column="BO_TITLE"/>
		<result property="boContent" column="BO_CON"/>
		<result property="boView" column="BO_VIEW"/>
		<result property="boDate" column="BO_DATE"/>
		<result property="boUpdate" column="BO_UPDATE"/>
		<result property="boDel" column="BO_DEL"/>
		<result property="boWriter" column="BO_WRITER"/>
		<result property="boGood" column="BO_GOOD"/>
		<result property="boCategory" column="BO_CATEGORY"/>
		<result property="boReNum" column="BO_RENUM"/>
		<result property="boWriterNick" column="ME_NICK"/>
		<result property="thumbnail" column="CON_COP"/>
		<result property="thumbnailURL" column="CON_URL"/>
	</resultMap>
	
	<select id="checkRecommendExist" resultType="_int">
		select count(*)
		from recommend
		where me_id = #{userId} and bo_num = #{boNum}
	</select>
	
	<insert id="insertRecommend">
		insert into recommend
		values(#{userId}, #{boNum})
	</insert>
	
	<update id="updateBoardRecommend">
		update board
		set bo_good = bo_good + 1
		where bo_num = #{boNum}
	</update>
	
	<select id="checkScrap" resultType="_int">
		select count(*)
		from scrap
		where me_id = #{userId} and bo_num = #{boNum}
	</select>
	
	<insert id="insertScrap">
		insert into scrap
		values(#{userId}, #{boNum}, to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'))
	</insert>
	
	<delete id="deleteScrap">
		delete from scrap
		where me_id = #{userId} and bo_num = #{boNum}
	</delete>
	
	<update id="plusReplyCount">
		update board
		set bo_renum = bo_renum + 1
		where bo_num = #{boNum}
	</update>
	
	<update id="deleteBoard">
		update board
		set bo_del = 'Y'
		where bo_num = #{boNum}
	</update>
	
	<update id="boardUpdate">
		update board
		set bo_title = #{boTitle}, bo_con = #{boContent}, bo_update = sysdate, bo_category = #{boCategory}
		where bo_num = #{boNum}
	</update>
	
	<select id="getTopBoard" resultMap="boardResultSet" parameterType="_int">
	    select *
		from (select bo_num, bo_title, bo_renum, bo_view, bo_good, bo_date, con_url, min(con_cop) as con_cop
		      from (select *
		            from board
		            left join contents on (contents.con_ref = board.bo_num)
		            where bo_group = 1)
		      group by bo_num, bo_title, bo_renum, bo_view, bo_good, bo_renum, bo_date, con_url
		      order by
		      <if test="number == 0">bo_view desc,</if>
		      <if test="number == 1">bo_good desc,</if>
		      <if test="number == 2">bo_renum desc,</if>
		      bo_date desc) 
		<![CDATA[
	    where rownum <= 10
	    ]]>
	</select>
</mapper>